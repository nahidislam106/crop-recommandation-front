import React, { useState } from "react";
import "./App.css";

// Import crop images
import Rice from "./cropImages/rice.jpg";
import Maize from "./cropImages/maize.jpg";
import Chickpea from "./cropImages/chickpea.jpg";
import Kidneybeans from "./cropImages/kidneybeans.jpg";
import Pigeonpeas from "./cropImages/pigeonpeas.jpg";
import Mothbeans from "./cropImages/mothbeans.jpg";
import Mungbean from "./cropImages/mungbean.jpg";
import Blackgram from "./cropImages/blackgram.jpg";
import Lentil from "./cropImages/lentil.jpg";
import Pomegranate from "./cropImages/pomegranate.jpg";
import Banana from "./cropImages/banana.jpg";
import Mango from "./cropImages/mango.jpg";
import Grapes from "./cropImages/grapes.jpg";
import Watermelon from "./cropImages/watermelon.jpg";
import Muskmelon from "./cropImages/muskmelon.jpg";
import Apple from "./cropImages/apple.jpg";
import Orange from "./cropImages/orange.jpg";
import Papaya from "./cropImages/papaya.jpg";
import Coconut from "./cropImages/coconut.jpg";
import Cotton from "./cropImages/cotton.jpg";
import Jute from "./cropImages/jute.jpg";
import Coffee from "./cropImages/coffee.jpg";

// Crop mapping with Bengali names and images
const cropMap = {
  Rice: { name: "ржЪрж╛рж▓", img: Rice },
  Maize: { name: "ржнрзБржЯрзНржЯрж╛", img: Maize },
  Chickpea: { name: "ржЫрзЛрж▓рж╛", img: Chickpea },
  Kidneybeans: { name: "рж░рж╛ржЬржорж╛", img: Kidneybeans },
  Pigeonpeas: { name: "ржЯрж┐ржВрж░рж╛", img: Pigeonpeas },
  Mothbeans: { name: "ржоржЯрж░", img: Mothbeans },
  Mungbean: { name: "ржорзБржЧржбрж╛рж▓", img: Mungbean },
  Blackgram: { name: "ржХрж╛рж▓рзЛ ржЫрзЛрж▓рж╛", img: Blackgram },
  Lentil: { name: "ржорж╕рзБрж░ ржбрж╛рж▓", img: Lentil },
  Pomegranate: { name: "ржбрж╛рж▓рж┐ржо", img: Pomegranate },
  Banana: { name: "ржХрж▓рж╛", img: Banana },
  Mango: { name: "ржЖржо", img: Mango },
  Grapes: { name: "ржЖржЩрзБрж░", img: Grapes },
  Watermelon: { name: "рждрж░ржорзБржЬ", img: Watermelon },
  Muskmelon: { name: "ржЦрж░ржмрзБржЬ", img: Muskmelon },
  Apple: { name: "ржЖржкрзЗрж▓", img: Apple },
  Orange: { name: "ржХржорж▓рж╛", img: Orange },
  Papaya: { name: "ржкрзЗржБржкрзЗ", img: Papaya },
  Coconut: { name: "ржирж╛рж░ржХрзЗрж▓", img: Coconut },
  Cotton: { name: "ржХржЯржи", img: Cotton },
  Jute: { name: "ржкрж╛ржЯ", img: Jute },
  Coffee: { name: "ржХржлрж┐", img: Coffee },
};

// Bangla labels for inputs
const banglaLabels = {
  N: "ржирж╛ржЗржЯрзНрж░рзЛржЬрзЗржи (N)",
  P: "ржлрж╕ржлрж░рж╛рж╕ (P)",
  K: "ржкржЯрж╛рж╢рж┐ржпрж╝рж╛ржо (K)",
  temperature: "рждрж╛ржкржорж╛рждрзНрж░рж╛ (┬░C)",
  humidity: "ржЖрж░рзНржжрзНрж░рждрж╛ (%)",
  pH: "ржкрж┐ржПржЗржЪ (pH)",
  EC: "ржЗрж▓рзЗржХржЯрзНрж░ржирж┐ржХ ржкрж░рж┐ржмрж╛рж╣рж┐рждрж╛ (EC)"
};

function MainPage() {
  const [formData, setFormData] = useState({
    N: "", P: "", K: "", temperature: "", humidity: "", pH: "", EC: ""
  });
  const [recommendations, setRecommendations] = useState([]);

  const handleChange = (e) => {
    setFormData({...formData, [e.target.name]: e.target.value});
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const res = await fetch("https://backend-c9ek.onrender.com/predict", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData)
      });
      const data = await res.json();
      setRecommendations(data["рж╕рзБржкрж╛рж░рж┐рж╢ржХрзГржд ржлрж╕рж▓"]);
    } catch (err) {
      console.error("Error:", err);
      alert("ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ, ржмрзНржпрж╛ржХржПржирзНржб ржЪрж╛рж▓рзБ ржЖржЫрзЗ ржХрж┐ ржжрзЗржЦрзБржи!");
    }
  };

  return (
    <div className="container">
      <h1>ЁЯМ╛ ржлрж╕рж▓ рж╕рзБржкрж╛рж░рж┐рж╢ ржмрзНржпржмрж╕рзНржерж╛</h1>
      <div className="main-content">
        <form className="input-section" onSubmit={handleSubmit}>
          {Object.keys(formData).map((key) => (
            <div className="input-group" key={key}>
              <label>{banglaLabels[key]}</label>
              <input
                type="number"
                name={key}
                value={formData[key]}
                onChange={handleChange}
                step="any"
                required
              />
            </div>
          ))}
          <button type="submit">рж╕рзБржкрж╛рж░рж┐рж╢ ржжрзЗржЦрзБржи</button>
        </form>

        <div className="results">
          <h2>тЬЕ рж╕рзБржкрж╛рж░рж┐рж╢ржХрзГржд ржлрж╕рж▓рж╕ржорзВрж╣:</h2>
          <div className="crop-grid">
            {recommendations.map((item, index) => (
              <div className="card" key={index}>
                <h3>{index + 1}. {cropMap[item.crop]?.name || item.crop}</h3>
                {cropMap[item.crop] && <img src={cropMap[item.crop].img} alt={item.crop} />}
                <p>рж╕ржарж┐ржХрждрж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛: {Math.round(item.probability * 100)}%</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

export default MainPage;
